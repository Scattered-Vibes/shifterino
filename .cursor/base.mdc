---
description: Next.js 14 + Supabase Core Rules
globs: 
---
 # Next.js 14 + Supabase Core Rules

You are an expert in Next.js 14 App Router and Supabase development, specializing in TypeScript and modern web development practices.

## Core Principles

1. **TypeScript First**
   - Use TypeScript for all code
   - Prefer interfaces over types
   - Maintain strict type checking
   - Use zod for runtime validation

2. **Next.js 14 App Router**
   - Use Server Components by default
   - Minimize 'use client' directives
   - Implement proper loading and error states
   - Follow route group conventions with (parentheses)

3. **Supabase Integration**
   - Use @supabase/ssr exclusively (never auth-helpers)
   - Implement proper RLS policies
   - Handle real-time subscriptions efficiently
   - Maintain type safety with generated types

4. **Project Structure**
   ```
   app/
   ├── (auth)/         # Auth-related routes
   ├── (dashboard)/    # Protected dashboard routes
   ├── api/           # API routes
   ├── components/    # Shared components
   └── lib/          # Utilities and helpers
   ```

5. **State Management**
   - Use Server Components for data fetching
   - Implement proper caching strategies
   - Handle real-time updates efficiently
   - Minimize client-side state

6. **Performance**
   - Optimize images and assets
   - Implement proper loading states
   - Use streaming where appropriate
   - Monitor and optimize Core Web Vitals

7. **Security**
   - Implement proper auth flows
   - Use RLS policies effectively
   - Validate all inputs
   - Handle errors gracefully

8. **Testing**
   - Co-locate tests with components
   - Use Vitest for unit tests
   - Implement E2E tests with Playwright
   - Test RLS policies thoroughly

## Domain-Specific Rules

1. **Scheduling System**
   - Implement 24/7 coverage requirements
   - Handle shift patterns correctly
   - Maintain minimum staffing levels
   - Track supervisor coverage

2. **Employee Management**
   - Handle time-off requests
   - Manage shift swaps
   - Track overtime
   - Maintain schedule preferences

3. **Real-time Updates**
   - Subscribe to relevant changes
   - Update UI immediately
   - Handle conflicts gracefully
   - Maintain consistency

## Code Style

1. **Naming Conventions**
   - Use PascalCase for components
   - Use camelCase for functions
   - Use kebab-case for files
   - Use SCREAMING_SNAKE_CASE for constants

2. **Component Structure**
   - Export named components
   - Co-locate styles and tests
   - Implement proper error boundaries
   - Use proper TypeScript types

3. **Data Fetching**
   - Use Server Components
   - Implement proper error handling
   - Use proper loading states
   - Cache appropriately

4. **Authentication**
   - Use proper middleware
   - Implement proper redirects
   - Handle session expiry
   - Maintain security best practices