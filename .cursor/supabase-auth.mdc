---
description: Supabase Authentication Rules
globs: 
---
 # Supabase Authentication Rules

## Core Authentication Principles

1. **Use @supabase/ssr Exclusively**
   ```typescript
   // CORRECT
   import { createClient } from '@supabase/ssr'
   
   // INCORRECT - NEVER USE
   import { createClient } from '@supabase/auth-helpers-nextjs'
   ```

2. **Client Creation Patterns**

   ```typescript
   // Server-side client (Server Components)
   import { createClient } from '@supabase/ssr'
   import { cookies } from 'next/headers'
   import { cache } from 'react'
   
   export const createServerClient = cache(() => {
     const cookieStore = cookies()
     return createClient(
       process.env.NEXT_PUBLIC_SUPABASE_URL!,
       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
       {
         cookies: {
           get(name: string) {
             return cookieStore.get(name)?.value
           },
           set(name: string, value: string, options: CookieOptions) {
             cookieStore.set({ name, value, ...options })
           },
           remove(name: string, options: CookieOptions) {
             cookieStore.set({ name, value: '', ...options })
           },
         },
       }
     )
   })
   
   // Client-side client (Client Components)
   import { createBrowserClient } from '@supabase/ssr'
   
   export const createClient = () => {
     return createBrowserClient(
       process.env.NEXT_PUBLIC_SUPABASE_URL!,
       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
     )
   }
   ```

3. **Middleware Implementation**

   ```typescript
   // middleware.ts
   import { createServerClient, type CookieOptions } from '@supabase/ssr'
   import { NextResponse, type NextRequest } from 'next/server'
   
   export async function middleware(request: NextRequest) {
     let response = NextResponse.next({
       request: {
         headers: request.headers,
       },
     })
   
     const supabase = createServerClient(
       process.env.NEXT_PUBLIC_SUPABASE_URL!,
       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
       {
         cookies: {
           get(name: string) {
             return request.cookies.get(name)?.value
           },
           set(name: string, value: string, options: CookieOptions) {
             request.cookies.set({
               name,
               value,
               ...options,
             })
             response = NextResponse.next({
               request: {
                 headers: request.headers,
               },
             })
             response.cookies.set({
               name,
               value,
               ...options,
             })
           },
           remove(name: string, options: CookieOptions) {
             request.cookies.set({
               name,
               value: '',
               ...options,
             })
             response = NextResponse.next({
               request: {
                 headers: request.headers,
               },
             })
             response.cookies.set({
               name,
               value: '',
               ...options,
             })
           },
         },
       }
     )
   
     const { data: { session } } = await supabase.auth.getSession()
   
     // Protected routes
     if (!session && request.nextUrl.pathname.startsWith('/dashboard')) {
       return NextResponse.redirect(new URL('/login', request.url))
     }
   
     return response
   }
   ```

4. **Auth Component Patterns**

   ```typescript
   // Server Component Auth Check
   import { createServerClient } from '@/lib/supabase/server'
   import { redirect } from 'next/navigation'
   
   export default async function ProtectedPage() {
     const supabase = createServerClient()
     const { data: { session } } = await supabase.auth.getSession()
   
     if (!session) {
       redirect('/login')
     }
   
     return <div>Protected Content</div>
   }
   
   // Client Component Auth Form
   'use client'
   
   import { createClient } from '@/lib/supabase/client'
   import { useRouter } from 'next/navigation'
   
   export function LoginForm() {
     const router = useRouter()
     const supabase = createClient()
   
     const handleSignIn = async (e: React.FormEvent) => {
       e.preventDefault()
       const { error } = await supabase.auth.signInWithPassword({
         email,
         password,
       })
       if (!error) {
         router.refresh()
         router.push('/dashboard')
       }
     }
   }
   ```

5. **Auth Hooks**

   ```typescript
   // hooks/useAuth.ts
   import { createClient } from '@/lib/supabase/client'
   import { useRouter } from 'next/navigation'
   import { useEffect, useState } from 'react'
   
   export function useAuth() {
     const [user, setUser] = useState(null)
     const [loading, setLoading] = useState(true)
     const supabase = createClient()
     const router = useRouter()
   
     useEffect(() => {
       const { data: { subscription } } = supabase.auth.onAuthStateChange(
         (event, session) => {
           setUser(session?.user ?? null)
           setLoading(false)
           if (event === 'SIGNED_OUT') {
             router.push('/login')
           }
         }
       )
   
       return () => {
         subscription.unsubscribe()
       }
     }, [])
   
     return { user, loading }
   }
   ```

6. **Security Best Practices**

   - Always use HTTPS in production
   - Implement proper password policies
   - Use proper session management
   - Implement rate limiting
   - Handle errors gracefully
   - Use proper TypeScript types
   - Validate all inputs
   - Use proper error messages
   - Implement proper logging
   - Use proper security headers