-- 06_fix_auth_sessions.sql
-- This migration adds the missing auth.sessions and auth.refresh_tokens tables
-- required by Supabase Auth for proper session management.

-- Create aal_level type if it doesn't exist
DO $$ BEGIN
    CREATE TYPE auth.aal_level AS ENUM ('aal1', 'aal2', 'aal3');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create auth.sessions table
CREATE TABLE IF NOT EXISTS auth.sessions (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamptz,
    refreshed_at timestamp,
    user_agent text,
    ip inet,
    tag text
);

-- Create auth.refresh_tokens table with nullable session_id
CREATE TABLE IF NOT EXISTS auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    token character varying(255),
    user_id character varying(255),
    revoked boolean DEFAULT false,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    parent character varying(255),
    session_id uuid
);

-- Create auth.mfa_amr_claims table
CREATE TABLE IF NOT EXISTS auth.mfa_amr_claims (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id uuid,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    authentication_method text NOT NULL,
    CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method)
);

-- Create indexes
CREATE UNIQUE INDEX IF NOT EXISTS refresh_tokens_token_unique ON auth.refresh_tokens (token);
CREATE INDEX IF NOT EXISTS refresh_tokens_session_id_idx ON auth.refresh_tokens (session_id);
CREATE INDEX IF NOT EXISTS refresh_tokens_instance_id_idx ON auth.refresh_tokens (instance_id);
CREATE INDEX IF NOT EXISTS refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens (instance_id, user_id);
CREATE INDEX IF NOT EXISTS refresh_tokens_parent_idx ON auth.refresh_tokens (parent);
CREATE INDEX IF NOT EXISTS refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens (session_id, revoked);

-- Set up triggers for updated_at columns
DROP TRIGGER IF EXISTS update_sessions_updated_at ON auth.sessions;
CREATE TRIGGER update_sessions_updated_at
    BEFORE UPDATE ON auth.sessions
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS update_refresh_tokens_updated_at ON auth.refresh_tokens;
CREATE TRIGGER update_refresh_tokens_updated_at
    BEFORE UPDATE ON auth.refresh_tokens
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS update_mfa_amr_claims_updated_at ON auth.mfa_amr_claims;
CREATE TRIGGER update_mfa_amr_claims_updated_at
    BEFORE UPDATE ON auth.mfa_amr_claims
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- Enable RLS
ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "Users can only access own sessions" ON auth.sessions;
DROP POLICY IF EXISTS "Users can only access own refresh tokens" ON auth.refresh_tokens;
DROP POLICY IF EXISTS "Auth service can manage MFA claims" ON auth.mfa_amr_claims;

-- Create policies
CREATE POLICY "Auth service can manage sessions" ON auth.sessions
    FOR ALL TO authenticator
    USING (true) WITH CHECK (true);

CREATE POLICY "Auth service can manage refresh tokens" ON auth.refresh_tokens
    FOR ALL TO authenticator
    USING (true) WITH CHECK (true);

CREATE POLICY "Auth service can manage MFA claims" ON auth.mfa_amr_claims
    FOR ALL TO authenticator
    USING (true) WITH CHECK (true);

-- Add deferred foreign key constraints
ALTER TABLE auth.refresh_tokens 
    DROP CONSTRAINT IF EXISTS refresh_tokens_session_id_fkey,
    ADD CONSTRAINT refresh_tokens_session_id_fkey 
    FOREIGN KEY (session_id) 
    REFERENCES auth.sessions(id) 
    ON DELETE CASCADE 
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE auth.mfa_amr_claims 
    DROP CONSTRAINT IF EXISTS mfa_amr_claims_session_id_fkey,
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey 
    FOREIGN KEY (session_id) 
    REFERENCES auth.sessions(id) 
    ON DELETE CASCADE 
    DEFERRABLE INITIALLY DEFERRED;

-- Set proper ownership
ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;
ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;
ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

-- Grant permissions
GRANT USAGE ON SCHEMA auth TO service_role, authenticator, anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA auth TO authenticator;
GRANT ALL ON ALL SEQUENCES IN SCHEMA auth TO authenticator;
GRANT ALL ON ALL ROUTINES IN SCHEMA auth TO authenticator;

-- Set default privileges
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth 
    GRANT ALL ON TABLES TO authenticator;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth 
    GRANT ALL ON SEQUENCES TO authenticator;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth 
    GRANT ALL ON ROUTINES TO authenticator; 